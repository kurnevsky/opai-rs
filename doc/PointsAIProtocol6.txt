Points AI Protocol, version 6
====

The communication between the AI and the GUI interface is done via messages to standart input of the AI and messages from standart output of the AI. For example, if AI wants to say something, it must send a message to his standart output. The GUI then must capture this message and analyze it. If the GUI wants to say something, it sends a message to the standart input of the AI.

More precise, every GUI->AI message must have the form: "id command_name arguments\n", and the AI must reply to it with one message of the form: "isOk id command_name arguments\n", where:

"isOk" is a single letter. It is "=" in case of a success and "?" in case of an error.

"id" is an int. It must be copied by the AI into his reply.

"\n" means "end of line".


Commands
====

list_commands
  return arguments - a space separated list of commands that the AI supports (can accept).

quit - request for the AI to exit.
  return arguments - none.

init width height random_seed - initialization.
  random_seed - seed for random number generator, useful for reproducing games.
  return arguments - none.

author
  return arguments - author of the AI.

name
  return arguments - name of the AI.

version
  return arguments - version of the AI.

license
  return arguments - license of the AI.

play x y color - play a move on the field.
  return arguments - x, y, color  of a played move.

gen_move color - request to calculate an AI move, but do NOT make it on the field.
  return arguments - x, y, color of the suggested move.

gen_move_with_complexity color complexity - request to calculate an AI move with the given complexity, but NOT to make it on the field.
  complexity - a number from 0 to 100. The interpretation of this number lies on the AI.
  return arguments - x, y, color of the suggested move.

gen_move_with_time color time - request to calculate an AI move within the given time (milliseconds), but NOT to make it on the field.
  return arguments - x, y, color of the suggested move.

gen_move_with_full_time color remaining_time time_per_move - request to calculate an AI move with full time (milliseconds) control at the side of AI, but NOT to make it on the field.
  return arguments - x, y, color of the suggested move.

undo - undo move.
  return arguments - none.


Explanations
====

The coordinate "x" is a number from 0 to fieldSizeX - 1. Same goes for "y".

"Color" is a boolean value serialized as "0" or "1".

Error messages should not contain return arguments.

If the argument string is returned, it should not contain spaces.


Example
====

Initialize the field:

init 3 3 0
= 0 init

Place a point in the center, with color "0":

1 play 1 1 0
= 1 play 1 1 0

Surround the point with 3 opponent points (color "1"):

2 play 0 1 1
= 2 play 0 1 1
3 play 1 0 1
= 3 play 1 0 1
4 play 2 1 1
= 4 play 2 1 1

Ask the AI to generate a move.

5 gen_move_with_time 1 1000

The AI should "think" about this command for no more than 1000 milliseconds. If the AI is smart enough, it will answer with:

= 5 gen_move_with_time 1 2 1

Thereby asking to surround the central point. If we allow it, we must separately place the point on the field:

6 play 1 2 1
= 6 play 1 2 1

That's it, the central point is now surrounded.
We initialized the field, placed 4 dots,
asked the computer to generate a move and placed the generated point on the field.
